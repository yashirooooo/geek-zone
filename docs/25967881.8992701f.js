(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{186:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),l=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,d=u["".concat(i,".").concat(f)]||u[f]||m[f]||a;return t?o.a.createElement(d,c(c({ref:n},s),{},{components:t})):o.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return l}));var r=t(3),o=t(7),a=(t(0),t(186)),i={title:"Get chain information"},c={unversionedId:"api/examples/promise/chain-info",id:"api/examples/promise/chain-info",isDocsHomePage:!1,title:"Get chain information",description:"This example shows how to connect to the api and retrieve the chain information such as the token name, the ss58 format for address encoding and the token decimals.",source:"@site/docs/api/examples/promise/chain-info.md",slug:"/api/examples/promise/chain-info",permalink:"/api/examples/promise/chain-info",editUrl:"https://github.com/yashirooooo/geek-zone/edit/master/docs/api/examples/promise/chain-info.md",version:"current",sidebar:"reference",previous:{title:"TS type generation",permalink:"/api/examples/promise/typegen"},next:{title:"FAQ",permalink:"/api/FAQ"}},p=[],s={toc:p};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This example shows how to connect to the api and retrieve the chain information such as the token name, the ss58 format for address encoding and the token decimals."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"// Import the API\nconst { ApiPromise } = require('@polkadot/api');\nconst { typesBundleForPolkadot } = require('@crustio/type-definitions');\n\nasync function main () {\n  // Create a new instance of the api\n  const api = await ApiPromise.create({\n            provider: new WsProvider('ws://127.0.0.1:9944'),\n            typesBundle: typesBundleForPolkadot\n        });\n  // get the chain information\n  const chainInfo = await api.registry.getChainProperties()\n\n  console.log(chainInfo);\n  // for Polkadot this would print\n  // {ss58Format: 0, tokenDecimals: [10], tokenSymbol: [DOT]}\n}\n\nmain().catch(console.error).finally(() => process.exit());;\n")))}l.isMDXComponent=!0}}]);