(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{186:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,f=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return n?o.a.createElement(f,s(s({ref:t},l),{},{components:n})):o.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(186)),i={title:"Storage"},s={unversionedId:"api/cookbook/storage",id:"api/cookbook/storage",isDocsHomePage:!1,title:"Storage",description:"Here you will find snippets for working with storage.",source:"@site/docs/api/cookbook/storage.md",slug:"/api/cookbook/storage",permalink:"/api/cookbook/storage",editUrl:"https://github.com/yashirooooo/geek-zone/edit/master/docs/api/cookbook/storage.md",version:"current",sidebar:"reference",previous:{title:"Blocks",permalink:"/api/cookbook/blocks"},next:{title:"Transactions",permalink:"/api/cookbook/tx"}},c=[{value:"How do I check for storage existence?",id:"how-do-i-check-for-storage-existence",children:[]},{value:"How do I use .entries()/.keys() on double maps?",id:"how-do-i-use-entrieskeys-on-double-maps",children:[]}],l={toc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Here you will find snippets for working with storage."),Object(a.b)("h2",{id:"how-do-i-check-for-storage-existence"},"How do I check for storage existence?"),Object(a.b)("p",null,"In the metadata, for each storage item a fallback is provided. This means that when an entry does not exist, the fallback (which is the default value for the type) will be provided. This means, that querying for a non-existent key (unless an option), will yield a value -"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"// retrieve Option<StakingLedger>\nconst ledger = await api.query.staking.ledger('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n// retrieve ValidatorPrefs (will yield the default value)\nconst prefs = await api.query.staking.validators('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(ledger.isNone, ledger.isSome); // true, false\nconsole.log(JSON.stringify(prefs.toHuman())); // {\"commission\":\"0\"}\n")),Object(a.b)("p",null,"In the second case, the non-existent prefs returns the default/fallback value for the storage item. So in this case we don't know if the value is set to 0 or unset. Existence can be checked by using the storage size, which would be zero if nothing is stored."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"// exists\nconst sizeY = await api.query.staking.validators.size('DB2mp5nNhbFN86J9hxoAog8JALMhDXgwvWMxrRMLNUFMEY4');\n// non existent\nconst sizeN = await api.query.staking.validators.size('EoukLS2Rzh6dZvMQSkqFy4zGvqeo14ron28Ue3yopVc8e3Q');\n\nconsole.log(sizeY.isZero(), sizeY.toNumber()); // false 4\nconsole.log(sizeN.isZero(), sizeY.toNumber()); // true 0\n")),Object(a.b)("h2",{id:"how-do-i-use-entrieskeys-on-double-maps"},"How do I use .entries()/.keys() on double maps?"),Object(a.b)("p",null,"As ",Object(a.b)("a",{parentName:"p",href:"/api/start/api.query.other#map-keys-entries"},"explained elsewhere")," each map-type storage entry exposes the entries/keys helpers to retrieve the whole list. In the case of double maps, with the addition of a single argument, you can retrieve either all entries or a subset based on the first map key."),Object(a.b)("p",null,"In both these cases, entries/keys operate the same way, ",Object(a.b)("inlineCode",{parentName:"p"},".entries()")," retrieving ",Object(a.b)("inlineCode",{parentName:"p"},"(StorageKey, Codec)[]")," and ",Object(a.b)("inlineCode",{parentName:"p"},".keys()")," retrieving ",Object(a.b)("inlineCode",{parentName:"p"},"StorageKey[]")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"// Retrieves the entries for all slashes, in all eras (no arg)\nconst allEntries = await api.query.staking.nominatorSlashInEra.entries();\n\n// nominatorSlashInEra(EraIndex, AccountId) for the types of the key args\nallEntries.forEach(([{ args: [era, nominatorId] }, value]) => {\n  console.log(`${era}: ${nominatorId} slashed ${value.toHuman()}`);\n});\n")),Object(a.b)("p",null,"While we can retrieve only the keys for a specific era, using a argument for the first part of the doublemap (as defined here, an ",Object(a.b)("inlineCode",{parentName:"p"},"EraIndex"),") -"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"// Retrieves the keys for the slashed validators in era 652\nconst slashedKeys = await api.query.staking.nominatorSlashInEra.keys(652);\n\n// key args still contains [EraIndex, AccountId] decoded\nconsole.log(`slashed: ${slashedKeys.map(({ args: [era, nominatorId] }) => nominatorId)`);\n")))}p.isMDXComponent=!0}}]);