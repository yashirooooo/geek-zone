(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{186:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return d}));var t=r(0),a=r.n(t);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),g=t,d=u["".concat(i,".").concat(g)]||u[g]||y[g]||o;return r?a.a.createElement(d,c(c({ref:n},l),{},{components:r})):a.a.createElement(d,c({ref:n},l))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},91:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return c})),r.d(n,"toc",(function(){return s})),r.d(n,"default",(function(){return p}));var t=r(3),a=r(7),o=(r(0),r(186)),i={title:"Sign & Verify Message"},c={unversionedId:"keyring/examples/sign-verify",id:"keyring/examples/sign-verify",isDocsHomePage:!1,title:"Sign & Verify Message",description:'The following example shows how to sign and verify a message with NaCl (pronounced "salt"), which is a Networking and Cryptography library used in util-crypto.',source:"@site/docs/keyring/examples/sign-verify.md",slug:"/keyring/examples/sign-verify",permalink:"/keyring/examples/sign-verify",editUrl:"https://github.com/yashirooooo/geek-zone/edit/master/docs/keyring/examples/sign-verify.md",version:"current"},s=[],l={toc:s};function p(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,'The following example shows how to sign and verify a message with NaCl (pronounced "salt"), which is a Networking and Cryptography library used in util-crypto.'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const {\n  stringToU8a,\n  u8aToHex\n} = require('@polkadot/util');\nconst {\n  naclEncrypt,\n  naclKeypairFromSeed,\n  naclSign,\n  naclVerify,\n  randomAsU8a\n} = require('@polkadot/util-crypto');\n\nasync function main () {\n  // Create account seed for an \"Alice\" account (generally rather use mnemonics)\n  const seedAlice = 'Alice'.padEnd(32, ' ');\n\n  // Generate new public/secret keypair for Alice from the supplied seed\n  const { publicKey, secretKey } = naclKeypairFromSeed(stringToU8a(seedAlice));\n\n  // Encrypt message. Create Uint8Array's filled with random bytes of specified length\n  const secret = randomAsU8a(32);\n  const messagePreEncryption = stringToU8a('please send me DOTs');\n  const noncePreEncryption = randomAsU8a(24);\n\n  const { encrypted } = naclEncrypt(messagePreEncryption, secret, noncePreEncryption);\n\n  // Sign the message with a valid signature\n  const messageSignature = naclSign(encrypted, secretKey);\n\n  console.log(`Message signature: ${u8aToHex(messageSignature)}`);\n\n  // Validate that the message was correctly signed\n  const isValidSignature = naclVerify(encrypted, messageSignature, publicKey);\n\n  console.log(`Was the message correctly signed? ${isValidSignature}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}p.isMDXComponent=!0}}]);