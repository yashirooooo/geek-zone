(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{186:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,b=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return n?r.a.createElement(b,c(c({ref:t},l),{},{components:n})):r.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(186)),o={title:"Contract Tx"},c={unversionedId:"api-contract/start/contract.tx",id:"api-contract/start/contract.tx",isDocsHomePage:!1,title:"Contract Tx",description:"In addition to using the .query. on a contract, the .tx. method is provides to send an actual encoded transaction to the contract, allow for execution and have this applied in a block. Expanding on our previous examples, we can now execute and then retrieve the subsequent value -",source:"@site/docs/api-contract/start/contract.tx.md",slug:"/api-contract/start/contract.tx",permalink:"/api-contract/start/contract.tx",editUrl:"https://github.com/yashirooooo/geek-zone/edit/master/docs/api-contract/start/contract.tx.md",version:"current",sidebar:"reference",previous:{title:"Contract",permalink:"/api-contract/start/contract.read"},next:{title:"FAQ",permalink:"/api-contract/FAQ"}},s=[{value:"Weight estimation",id:"weight-estimation",children:[]},{value:"Events",id:"events",children:[]},{value:"That is it... for now",id:"that-is-it-for-now",children:[]}],l={toc:s};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In addition to using the ",Object(i.b)("inlineCode",{parentName:"p"},".query.<messageName>")," on a contract, the ",Object(i.b)("inlineCode",{parentName:"p"},".tx.<messageName>")," method is provides to send an actual encoded transaction to the contract, allow for execution and have this applied in a block. Expanding on our previous examples, we can now execute and then retrieve the subsequent value -"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"// We will use these values for the execution\nconst value = 0; // only useful on isPayable messages\nconst gasLimit = 3000n * 1000000n;\nconst incValue = 1;\n\n// Send the transaction, like elsewhere this is a normal extrinsic\n// with the same rules as applied in the API (As with the read example,\n// additional params, if required can follow - here only one is needed)\nawait contract.tx\n  .inc({ value, gasLimit }, incValue)\n  .signAndSend(alicePair, (result) => {\n    if (result.status.isInBlock) {\n      console.log('in a block');\n    } else if (result.status.isFinalized) {\n      console.log('finalized');\n    }\n  });\n")),Object(i.b)("p",null,"If we perform the same ",Object(i.b)("inlineCode",{parentName:"p"},"query.get")," read on the value now, it would be ",Object(i.b)("inlineCode",{parentName:"p"},"124"),". For lower-level access, like we have in the ",Object(i.b)("inlineCode",{parentName:"p"},"Blueprint")," via ",Object(i.b)("inlineCode",{parentName:"p"},".createContract")," you can also perform the execution via the ",Object(i.b)("inlineCode",{parentName:"p"},".exec")," function, which would yield equivalent results -"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"// Send the transaction, like elsewhere this is a normal submittable\n// extrinsic with the same rules as applied in the API\nawait contract\n  .exec('inc', { value, gasLimit }, incValue)\n  .signAndSend(alicePair, (result) => {\n    ...\n  });\n")),Object(i.b)("p",null,"For the above interface we can specify the message as the string name, the index of the actual message as retrieved via the Abi."),Object(i.b)("h2",{id:"weight-estimation"},"Weight estimation"),Object(i.b)("p",null,"To estimate the gasLimit (which in the Substrate context refers to the weight used), we can use the ",Object(i.b)("inlineCode",{parentName:"p"},".query")," (read) interfaces with a sufficiently large value to retrieve the actual gas consumed. The API makes this easy - with a ",Object(i.b)("inlineCode",{parentName:"p"},"gasLimit")," or ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," passed to the query it will use the maximum gas limit available to transactions and the return value will have the actual gas used."),Object(i.b)("p",null,"To see this in practice -"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"// We will use these values for the execution\nconst value = 0;\nconst incValue = 1;\n\n// Instead of sending we use the `call` interface via `.query` that will return\n// the gas consumed (the API aut-fill the max block tx weight when -1 is the gasLimit)\nconst { gasConsumed, result } = await contract.query.inc(slicePair, { value, gasLimit: -1 }, incValue)\n\nconsole.log(`outcome: ${result.isOk ? 'Ok' : 'Error'}`);\nconsole.log(`gasConsumed ${gasConsumed.toString()}`);\n")),Object(i.b)("p",null,"We can use the ",Object(i.b)("inlineCode",{parentName:"p"},"gasConsumed")," input (potentially with a buffer for various execution paths) in any calls to ",Object(i.b)("inlineCode",{parentName:"p"},"contract.tx.inc(...)")," with the same input parameters specified on the ",Object(i.b)("inlineCode",{parentName:"p"},"query")," where the estimation was done."),Object(i.b)("h2",{id:"events"},"Events"),Object(i.b)("p",null,"On current versions of the API, any events raised by the contract will be transparently decoded with the relevant ABI and will be made available on the ",Object(i.b)("inlineCode",{parentName:"p"},"result")," (from ",Object(i.b)("inlineCode",{parentName:"p"},".signAndSend(alicePair, (result) => {...}"),") as ",Object(i.b)("inlineCode",{parentName:"p"},"contractEvents"),"."),Object(i.b)("p",null,"Where no events were emitted this value would be ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),", however should events be emitted, the array will contain all the decoded values."),Object(i.b)("h2",{id:"that-is-it-for-now"},"That is it... for now"),Object(i.b)("p",null,"This was a whirl-wind tour of what the API provides in terms of the ",Object(i.b)("inlineCode",{parentName:"p"},"@polkadot/api-contract")," interface. It is not perfect yet, we would like to expand it to allow for greater type-checking on the contracts (instead of read/exec wit messages), but hopefully in the current state it already enhances the way you can interact with contracts."))}u.isMDXComponent=!0}}]);